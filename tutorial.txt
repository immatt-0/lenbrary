======================================================
LENBRARY - MANAGEMENT AND SETUP GUIDE
======================================================

This guide explains how to manage the Lenbrary system using our unified management script.

------------------------------------------------------
SETUP AND INSTALLATION
------------------------------------------------------

1. Install Python dependencies:
   pip install -r requirements.txt

2. Navigate to the backend folder:
   cd C:\code\lenbrary\backend

------------------------------------------------------
DATABASE MANAGEMENT
------------------------------------------------------

The unified management script provides several commands for database and user management:

1. Recreate Database (Complete Reset):
   python -m scripts.manage recreate-db
   - This will delete the existing database and create a fresh one
   - Type "RECREATE" when prompted
   - Automatically creates essential groups (Librarians, Teachers)

2. Create Librarian Account:
   python -m scripts.manage create-librarian
   - Creates a new librarian account with admin privileges
   - Uses default values (username: librarian, password: Library123)
   - Option to customize values

------------------------------------------------------
USER MANAGEMENT
------------------------------------------------------

1. List Users and Groups:
   python -m scripts.manage list-users
   - Shows all users with their groups and status
   - Displays last login times and user roles

2. Delete User:
   python -m scripts.manage delete-user [username]
   - Delete a specific user by username
   - Or run without username for interactive selection

3. Clean Up Inactive Users:
   python -m scripts.manage cleanup-users
   - Removes users inactive for 30+ days
   - Excludes librarians and superusers
   - Requires confirmation

4. Update Student Profile:
   python -m scripts.manage update-student [username]
   - Update or create a student profile
   - Interactive mode if no username provided
   - Can modify: Student ID, School Type, Department, Class

------------------------------------------------------
TESTING AND DEVELOPMENT
------------------------------------------------------

1. Create Test Data:
   python create_test_data.py
   - Creates sample books, users, and borrowing records
   - Includes a test book with 10 copies

2. Run Development Server:
   python run_server.py
   - Starts the Django development server
   - Access the admin interface at http://localhost:8000/admin

------------------------------------------------------
DEFAULT LOGIN CREDENTIALS
------------------------------------------------------

After setup, you can log in with:

Librarian (Admin):
- Username: librarian
- Password: Librarian123
- URL: http://localhost:8000/admin

Test Accounts (after running create_test_data.py):
- Student: student@nlenau.ro / Student123
- Teacher: teacher@nlenau.ro / Teacher123

------------------------------------------------------
TROUBLESHOOTING
------------------------------------------------------

Common Issues:

1. Database Errors:
   - Ensure no process is using the database
   - Check file permissions
   - Try recreate-db command for a fresh start

2. User Management:
   - Use list-users to verify user existence
   - Check user groups and permissions
   - Ensure proper role assignment

3. Development Server:
   - Check if port 8000 is available
   - Verify all dependencies are installed
   - Check Django logs for specific errors

For more help:
1. Check the error messages for specific issues
2. Review the Django documentation
3. Check the project's README.md for additional information 